
resource "aws_dynamodb_table" "ddb_table" {
  count          = "${(var.enable && length(var.dynamo_table_configs) > 0) ? length(var.dynamo_table_configs) : 0}"
  name           = "${lookup(element(var.dynamo_table_configs, count.index), "table_name")}${var.table_name_suffix}"
  read_capacity  = "${lookup(element(var.dynamo_table_configs, count.index), "read_capacity_units")}"
  write_capacity = "${lookup(element(var.dynamo_table_configs, count.index), "write_capacity_units")}"

  hash_key       = "${lookup(element(var.dynamo_table_configs, count.index), "hash_key")}"
  stream_enabled = "${lookup(element(var.dynamo_table_configs, count.index), "stream_enabled")}"
  stream_view_type = "${lookup(element(var.dynamo_table_configs, count.index), "stream_enabled") == true ?
  lookup(element(var.dynamo_table_configs, count.index), "stream_view_type") : ""}"

  dynamic "attribute" {
    for_each = [for attrib in lookup(element(var.dynamo_table_configs, count.index), "attributes") : {
      name = attrib.name
      type = attrib.type
    }]
    content {
      name = attribute.value.name
      type = attribute.value.type
    }
  }

  dynamic "global_secondary_index" {
    for_each = [for gsi in lookup(element(var.dynamo_table_configs, count.index), "global_secondary_indexes") : {
      name               = lookup(gsi, "name", "NoIndexName?")
      hash_key           = lookup(gsi, "hash_key")
      range_key          = lookup(gsi, "range_key", null)
      read_capacity      = lookup(gsi, "read_capacity")
      write_capacity     = lookup(gsi, "write_capacity")
      projection_type    = lookup(gsi, "projection_type", "KEYS_ONLY")
      non_key_attributes = lookup(gsi, "non_key_attributes", [])
    }]
    content {
      name               = global_secondary_index.value.name
      hash_key           = global_secondary_index.value.hash_key
      range_key          = global_secondary_index.value.range_key
      read_capacity      = global_secondary_index.value.read_capacity
      write_capacity     = global_secondary_index.value.write_capacity
      projection_type    = global_secondary_index.value.projection_type
      non_key_attributes = global_secondary_index.value.non_key_attributes
    }
  }

  dynamic "global_secondary_index" {
    for_each = [for gsi in lookup(element(var.dynamo_table_configs, count.index), "global_secondary_indexes", []) : {
      name               = lookup(gsi, "name", "NoIndexName?")
      hash_key           = lookup(gsi, "hash_key")
      range_key          = lookup(gsi, "range_key", null)
      read_capacity      = lookup(gsi, "read_capacity")
      write_capacity     = lookup(gsi, "write_capacity")
      projection_type    = lookup(gsi, "projection_type", "KEYS_ONLY")
      non_key_attributes = lookup(gsi, "non_key_attributes", [])
    }]
    content {
      name               = global_secondary_index.value.name
      hash_key           = global_secondary_index.value.hash_key
      range_key          = global_secondary_index.value.range_key
      read_capacity      = global_secondary_index.value.read_capacity
      write_capacity     = global_secondary_index.value.write_capacity
      projection_type    = global_secondary_index.value.projection_type
      non_key_attributes = global_secondary_index.value.non_key_attributes
    }
  }

  dynamic "local_secondary_index" {
    for_each = [for gsi in lookup(element(var.dynamo_table_configs, count.index), "local_secondary_indexes", []) : {
      name               = lookup(gsi, "name", "NoIndexName?")
      range_key          = lookup(gsi, "range_key", null)
      projection_type    = lookup(gsi, "projection_type", "KEYS_ONLY")
      non_key_attributes = lookup(gsi, "non_key_attributes", [])
    }]
    content {
      name               = local_secondary_index.value.name
      range_key          = local_secondary_index.value.range_key
      projection_type    = local_secondary_index.value.projection_type
      non_key_attributes = local_secondary_index.value.non_key_attributes
    }
  }

  ttl {
    attribute_name = "${lookup(element(var.dynamo_table_configs, count.index), "ttl_attribute_name") != "" ?
    lookup(element(var.dynamo_table_configs, count.index), "ttl_attribute_name") : ""}"

    enabled = "${lookup(element(var.dynamo_table_configs, count.index), "ttl_enable") == true ? true : false}"
  }

  # tags = ["${var.tags}"]

}

# resource "aws_dynamodb_global_table" "global_table" {
  
#   depends_on = 
# }


